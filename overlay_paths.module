<?php
/**
 * @file
 *   The overlay paths module.
 */

/**
 * Get an array of non-administrative overlay paths.
 */
function overlay_paths_get_overlay_paths() {
  $paths = &drupal_static(__FUNCTION__);
  if (!isset($paths)) {
    $paths = module_invoke_all('overlay_paths');
    drupal_alter('overlay_paths', $paths);
  }
  return $paths;
}

/**
 * Get a pattern of non-administrative overlay paths.
 */
function overlay_paths_get_overlay_patterns() {
  $patterns = &drupal_static(__FUNCTION__);
  if (!isset($patterns)) {
    $paths = overlay_paths_admin_paths();
    $patterns = implode("\n", array_keys($paths));
  }
  return $patterns;
}

/**
 * Implements hook_admin_paths().
 *
 * To make paths appear in the overlay, we need to declare them as an admin
 * path. This will of course mean that Drupal tries to make them use the admin
 * theme too, but we undo that in overlay_paths_custom_theme().
 */
function overlay_paths_admin_paths() {
  $paths = &drupal_static(__FUNCTION__);
  if (!isset($paths)) {
    foreach (overlay_paths_get_overlay_paths() as $path => $v) {
      if ($v !== FALSE) {
        $paths[$path] = TRUE;
      }
    }
  }
  return $paths;
}

/**
 * Implements hook_custom_theme().
 *
 * We duplicate the functionality of the system module's implementation, but
 * check to see if we're actually on one of the non-administrative overlay pages
 * too.
 *
 * @see system_custom_theme();
 */
function overlay_paths_custom_theme() {
  if (user_access('view the administration theme') && path_is_admin(current_path())  && !drupal_match_path(current_path(), overlay_paths_get_overlay_patterns())) {
    return variable_get('admin_theme');
  }
}

/**
* Implements hook_module_implements_alter().
*
* We're going to swap out system module's implementation of hook_custom_theme for our own.
*/
function overlay_paths_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'custom_theme') {
    if (isset($implementations['overlay_paths'])) {
      unset($implementations['system']);
    }
  }
}

/**
 * Implements hook_overlay_child_initialize().
 */
function overlay_paths_overlay_child_initialize() {
  // Scan the current path to try to find and custom styles
  $paths = array_filter(overlay_paths_get_overlay_paths(), 'is_array');
  foreach ($paths as $path => $options) {
    if (drupal_match_path(current_path(), $path)) {
      if (isset($options['width'])) {
        if ($width = overlay_paths_match_width($options['width'])) {
          $css = <<<EOT
#overlay {
  width: $width;
  min-width: $width;
  margin: 0 auto;
}
EOT;
          drupal_add_css($css, array('type' => 'inline'));
        }
      }

      break;
    }
  }
}

/**
 * Return a valid CSS width value from the given string.
 */
function overlay_paths_match_width($width) {
  $matches = array();
  if (preg_match('#^\d+(px|em|%)?$#', $width, $matches)) {
    $width = $matches[0];
    if (empty($matches[1])) {
      $width .= 'px';
    }
    return $width;
  }
  return FALSE;
}
